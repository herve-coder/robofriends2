{"version":3,"sources":["serviceWorker.js","Components/Card/Card.js","Components/CardList/CardList.js","Components/Searchbar/Searchbar.js","Components/Scroll/Scroll.js","Containers/ErrorBoundary/ErrorBoundary.js","Containers/App/App.js","index.js"],"names":["Boolean","window","location","hostname","match","Card","props","id","name","email","className","src","alt","CardList","robots","map","robot","key","Searchbar","SearchChange","type","placeholder","onChange","Scroll","style","overflowY","border","height","children","ErrorBoundary","state","hasError","this","setState","Component","App","onSearchChange","event","searchField","target","value","fetch","then","response","json","users","user","push","catch","res","console","log","filteredRobots","filter","toLowerCase","includes","length","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"ySAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,uCCKSC,G,MApBF,SAAAC,GAAU,IACbC,EAAoBD,EAApBC,GAAIC,EAAgBF,EAAhBE,KAAMC,EAAUH,EAAVG,MAClB,OACE,6BAASC,UAAU,4EACjB,yBAAKA,UAAU,MACb,yBACEC,IAAG,+BAA0BJ,EAA1B,gBACHG,UAAU,mBACVE,IAAI,KAEN,wBAAIF,UAAU,MAAMF,GACpB,wBAAIE,UAAU,2BAA4B,KAE5C,yBAAKA,UAAU,MACb,uBAAGA,UAAU,sCAAsCD,OCH5CI,G,MAVE,SAAC,GAAgB,IAAdC,EAAa,EAAbA,OAClB,OACE,yBAAKJ,UAAU,UACZI,EAAOC,KAAI,SAAAC,GAAK,OACf,kBAAC,EAAD,eAAMC,IAAKD,EAAMT,IAAQS,UCOlBE,G,MAbG,SAAC,GAAsB,IAApBC,EAAmB,EAAnBA,aACnB,OACE,8BACE,2BACET,UAAU,gBACVU,KAAK,SACLC,YAAY,gBACZC,SAAUH,OCJHI,EAHA,SAAAjB,GACb,OAAO,yBAAKkB,MAAQ,CAACC,UAAW,SAAUC,OAAQ,kBAAmBC,OAAQ,UAAWrB,EAAMsB,WCkBjFC,E,YAlBb,aAAe,IAAD,8BACZ,+CACKC,MAAQ,CACXC,UAAU,GAHA,E,iFAOZC,KAAKC,SAAS,CAAEF,UAAU,M,+BAI1B,OAAIC,KAAKF,MAAMC,SACN,wDAEFC,KAAK1B,MAAMsB,a,GAfMM,aCwDbC,G,kBAlDb,aAAe,IAAD,8BACZ,+CAwBFC,eAAiB,SAAAC,GACf,EAAKJ,SAAS,CAAEK,YAAaD,EAAME,OAAOC,SAxB1C,EAAKV,MAAQ,CACXhB,OAAQ,GACRwB,YAAa,IAJH,E,iFAQO,IAAD,OAClBG,MAAM,8CACHC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GACJ,IAAM/B,EAAS,GACf+B,EAAM9B,KAAI,SAAA+B,GACR,OAAOhC,EAAOiC,KAAK,CACjBxC,GAAIuC,EAAKvC,GACTC,KAAMsC,EAAKtC,KACXC,MAAOqC,EAAKrC,WAGhB,EAAKwB,SAAS,CAAEnB,OAAQA,OAEzBkC,OAAM,SAAAC,GAAG,OAAIC,QAAQC,IAAI,qC,+BAMpB,IAAD,EACyBnB,KAAKF,MAA7BhB,EADD,EACCA,OAAQwB,EADT,EACSA,YACVc,EAAiBtC,EAAOuC,QAAO,SAAArC,GACnC,OAAOA,EAAMR,KAAK8C,cAAcC,SAASjB,EAAYgB,kBAGvD,OAAQxC,EAAO0C,OAGb,yBAAK9C,UAAU,MACb,2CACA,kBAAC,EAAD,CAAWS,aAAca,KAAKI,iBAC9B,kBAAC,EAAD,KACE,kBAAC,EAAD,KACE,kBAAC,EAAD,CAAUtB,OAAQsC,OAPxB,2C,GApCYlB,cCAlBuB,IAASC,OAAO,kBAAC,EAAD,MAAQC,SAASC,eAAe,SP0H1C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMrB,MAAK,SAAAsB,GACjCA,EAAaC,kB","file":"static/js/main.79b26b90.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport \"./Card.css\";\n\nconst Card = props => {\n  const { id, name, email } = props;\n  return (\n    <article className=\" br2 ba  bg-light-green grow b--black-10 mv4 dib w-100 w-50-m w-25-l mw5\">\n      <div className=\"tc\">\n        <img\n          src={`https://robohash.org/${id}.png?200x200`}\n          className=\"br-100 h5 w5 dib\"\n          alt=\"\"\n        />\n        <h1 className=\"f4\">{name}</h1>\n        <hr className=\"mw3 bb bw1 b--black-10\" />{\" \"}\n      </div>\n      <div className=\"tc\">\n        <p className=\"lh-copy measure center f6 black-70\">{email}</p>\n      </div>\n    </article>\n  );\n};\n\nexport default Card;\n","import React from \"react\";\r\nimport Card from \"../Card/Card\";\r\nimport \"./CardList.css\";\r\n\r\nconst CardList = ({ robots }) => {\r\n  return (\r\n    <div className=\"layout\">\r\n      {robots.map(robot => (\r\n        <Card key={robot.id} {...robot} />\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CardList;\r\n","import React from \"react\";\r\nimport \"./Searchbar.css\";\r\nconst Searchbar = ({ SearchChange }) => {\r\n  return (\r\n    <form>\r\n      <input\r\n        className=\"pa3 mb3 input\"\r\n        type=\"search\"\r\n        placeholder=\"Search robots\"\r\n        onChange={SearchChange}\r\n      ></input>\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default Searchbar;\r\n","import React from \"react\";\r\n\r\nconst Scroll = props => {\r\n  return <div style ={{overflowY: \"scroll\", border: \"1px solid black\", height: \"500px\"}}>{props.children}</div>;\r\n};\r\nexport default Scroll;\r\n","import React, { Component } from \"react\";\r\n\r\nclass ErrorBoundary extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      hasError: false\r\n    };\r\n  }\r\n  componentDidCatch() {\r\n    this.setState({ hasError: true });\r\n  }\r\n\r\n  render() {\r\n    if (this.state.hasError) {\r\n      return <h1>Oooops that is not good!</h1>;\r\n    }\r\n    return this.props.children;\r\n  }\r\n}\r\n\r\nexport default ErrorBoundary;\r\n","import React, { Component } from \"react\";\r\nimport CardList from \"../../Components/CardList/CardList\";\r\nimport Searchbar from \"../../Components/Searchbar/Searchbar\";\r\nimport Scroll from \"../../Components/Scroll/Scroll\";\r\nimport ErrorBoundary from \"../ErrorBoundary/ErrorBoundary\";\r\nimport \"./App.css\";\r\n\r\nclass App extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      robots: [],\r\n      searchField: \"\"\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    fetch(\"https://jsonplaceholder.typicode.com/users\")\r\n      .then(response => response.json())\r\n      .then(users => {\r\n        const robots = [];\r\n        users.map(user => {\r\n          return robots.push({\r\n            id: user.id,\r\n            name: user.name,\r\n            email: user.email\r\n          });\r\n        });\r\n        this.setState({ robots: robots });\r\n      })\r\n      .catch(res => console.log(\"Ouuf Users not available yet\"));\r\n  }\r\n\r\n  onSearchChange = event => {\r\n    this.setState({ searchField: event.target.value });\r\n  };\r\n  render() {\r\n    const { robots, searchField } = this.state;\r\n    const filteredRobots = robots.filter(robot => {\r\n      return robot.name.toLowerCase().includes(searchField.toLowerCase());\r\n    });\r\n\r\n    return !robots.length ? (\r\n      <h1>Loading</h1>\r\n    ) : (\r\n      <div className=\"tc\">\r\n        <h1>ROBOFRIENDS</h1>\r\n        <Searchbar SearchChange={this.onSearchChange} />\r\n        <Scroll>\r\n          <ErrorBoundary>\r\n            <CardList robots={filteredRobots} />\r\n          </ErrorBoundary>\r\n        </Scroll>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport \"tachyons\";\nimport * as serviceWorker from './serviceWorker';\nimport App from './Containers/App/App';\n\nReactDOM.render(<App/>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}