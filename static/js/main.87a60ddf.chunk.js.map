{"version":3,"sources":["serviceWorker.js","Components/Card/Card.js","Components/CardList/CardList.js","Components/Searchbar/Searchbar.js","Components/Scroll/Scroll.js","Containers/ErrorBoundary/ErrorBoundary.js","Containers/CounterButton.js","Components/Header/Header.js","Containers/App/App.js","Actions.js","Constants.js","Reducers.js","index.js"],"names":["isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","Card","props","id","name","email","className","src","alt","CardList","robots","map","robot","key","Searchbar","SearchChange","aria-label","type","placeholder","onChange","Scroll","style","overflowY","border","height","children","ErrorBoundary","hasError","this","setState","Component","CounterButton","updateCounter","count","nextProps","nextState","background","color","padding","margin","boxSizing","onClick","Header","App","onRequestRobots","searchField","onSearchChange","isPending","filteredRobots","filter","toLowerCase","includes","connect","searchRobots","searchfield","getRobots","dispatch","event","payload","target","value","fetch","response","json","initialSearchState","initialRobotsState","rootReducer","combineReducers","action","Object","assign","store","createLogger","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","document","getElementById","URL","process","href","origin","addEventListener","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.87a60ddf.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      console.log(\"SW not created\");\n\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport \"./Card.css\";\n\nconst Card = props => {\n  const { id, name, email } = props;\n  return (\n    <article className=\" br4 ba grow mw5 b--black-10 mv4 dib  w-50-m w-25-l \">\n      <div className=\"tc\">\n        <img\n          src={`https://robohash.org/${id}.png?size=260x260`}\n          // {className=\"db br2 br--top center\"}\n          alt=\"\"\n        />\n        <h1 className=\"f4\">{name}</h1>\n        <hr className=\"mw3 bb bw1 b--black-10\" />{\" \"}\n      </div>\n      <div className=\"tc\">\n        <p className=\"lh-copy measure center f6 white\">{email}</p>\n      </div>\n    </article>\n  );\n};\n\nexport default Card;\n","import React from \"react\";\r\nimport Card from \"../Card/Card\";\r\nimport \"./CardList.css\";\r\n\r\nconst CardList = ({ robots }) => {\r\n  return (\r\n    <div className=\"layout\">\r\n      {robots.map(robot => (\r\n        <Card key={robot.id} {...robot} />\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CardList;\r\n","import React from \"react\";\r\nimport \"./Searchbar.css\";\r\nconst Searchbar = ({ SearchChange }) => {\r\n  return (\r\n    <form>\r\n      <input\r\n        aria-label=\"filter robots here\"\r\n        id=\"search\"\r\n        className=\"pa3 mb3 input\"\r\n        type=\"search\"\r\n        placeholder=\"Search robots\"\r\n        onChange={SearchChange}\r\n      ></input>\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default Searchbar;\r\n","import React from \"react\";\r\n\r\nconst Scroll = props => {\r\n  return <div style ={{overflowY: \"scroll\", border: \"1px solid black\", height: \"500px\"}}>{props.children}</div>;\r\n};\r\nexport default Scroll;\r\n","import React, { Component } from \"react\";\r\n\r\nclass ErrorBoundary extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      hasError: false\r\n    };\r\n  }\r\n  componentDidCatch() {\r\n    this.setState({ hasError: true });\r\n  }\r\n\r\n  render() {\r\n    if (this.state.hasError) {\r\n      return <h1>Oooops that is not good!</h1>;\r\n    }\r\n    return this.props.children;\r\n  }\r\n}\r\n\r\nexport default ErrorBoundary;\r\n","import React, { Component } from \"react\";\r\n\r\nclass CounterButton extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      count: 0\r\n    };\r\n  }\r\n\r\n  shouldComponentUpdate(nextProps, nextState) {\r\n    if (this.state.count !== nextState.count) {\r\n      return true;\r\n    }\r\n    return false;\r\n  }\r\n\r\n  updateCounter = () => {\r\n    this.setState(state => {\r\n      return { count: state.count + 1 };\r\n    });\r\n  };\r\n\r\n  render() {\r\n\r\n    return (\r\n      <button\r\n        style={{\r\n          background: this.props.background,\r\n          color: this.props.color,\r\n          padding: \"0 2rem\",\r\n          margin: \"1rem 0\",\r\n          boxSizing: \"border-box\"\r\n        }}\r\n        onClick={this.updateCounter}\r\n      >\r\n        <h1>Count: {this.state.count}</h1>\r\n      </button>\r\n    );\r\n  }\r\n}\r\n\r\nexport default CounterButton;\r\n","import React, { Component } from \"react\";\r\nimport CounterButton from \"../../Containers/CounterButton\";\r\nimport \"./styles.css\";\r\n\r\nclass Header extends Component {\r\n  render() {\r\n    return (\r\n      <div>\r\n        <h1 className=\"f1 title\">ROBOFRIENDS</h1>\r\n        <CounterButton color={\"#fff\"} background={\"#001b44\"} />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Header;\r\n","import React, { Component } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport CardList from \"../../Components/CardList/CardList\";\r\nimport Searchbar from \"../../Components/Searchbar/Searchbar\";\r\nimport Scroll from \"../../Components/Scroll/Scroll\";\r\nimport ErrorBoundary from \"../ErrorBoundary/ErrorBoundary\";\r\nimport Header from \"../../Components/Header/Header\";\r\n\r\nimport \"./App.css\";\r\nimport { setSearchField, requestRobots } from \"../../Actions\";\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n    searchField: state.searchRobots.searchfield,\r\n    isPending: state.getRobots.isPending,\r\n    robots: state.getRobots.robots,\r\n    error: state.getRobots.error\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n  return {\r\n    onSearchChange: event => dispatch(setSearchField(event.target.value)),\r\n    onRequestRobots: () => dispatch(requestRobots())\r\n  };\r\n};\r\n\r\nclass App extends Component {\r\n  componentDidMount() {\r\n    this.props.onRequestRobots();\r\n  }\r\n\r\n  render() {\r\n    const { robots, searchField, onSearchChange, isPending } = this.props;\r\n    const filteredRobots = robots.filter(robot => {\r\n      return robot.name.toLowerCase().includes(searchField.toLowerCase());\r\n    });\r\n\r\n    return (\r\n      <div className=\"tc\">\r\n        <Header />\r\n        \r\n        <Searchbar SearchChange={onSearchChange} />\r\n        {isPending ? (<h1>Loading</h1>) : (\r\n        <Scroll>\r\n          <ErrorBoundary>\r\n            <CardList robots={filteredRobots} />\r\n          </ErrorBoundary>\r\n        </Scroll>\r\n        )}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(App);\r\n","import {\r\n  CHANGE_SEARCHFIELD,\r\n  REQUEST_ROBOTS_PENDING,\r\n  REQUEST_ROBOTS_SUCCESS,\r\n  REQUEST_ROBOTS_FAILED\r\n} from \"./Constants\";\r\n\r\nexport const setSearchField = Text => ({\r\n  type: CHANGE_SEARCHFIELD,\r\n  payload: Text\r\n});\r\n\r\nexport const requestRobots = () => dispatch => {\r\n  dispatch({ type: REQUEST_ROBOTS_PENDING });\r\n  fetch(\"https://jsonplaceholder.typicode.com/users\")\r\n    .then(response => response.json())\r\n    .then(robots => dispatch({ type: REQUEST_ROBOTS_SUCCESS, payload: robots }))\r\n    .catch(error => dispatch({ type: REQUEST_ROBOTS_FAILED, payload: error }));\r\n};\r\n","export const CHANGE_SEARCHFIELD = \"CHANGE_SEARCHFIELD\";\r\n\r\nexport const REQUEST_ROBOTS_PENDING = \"REQUEST_ROBOTS_PENDING\";\r\n\r\nexport const REQUEST_ROBOTS_SUCCESS = \"REQUEST_ROBOTS_SUCCESS\";\r\n\r\nexport const REQUEST_ROBOTS_FAILED = \"REQUEST_ROBOTS_FAILED\";","import {\r\n  CHANGE_SEARCHFIELD,\r\n  REQUEST_ROBOTS_PENDING,\r\n  REQUEST_ROBOTS_SUCCESS,\r\n  REQUEST_ROBOTS_FAILED\r\n} from \"./Constants\";\r\n\r\nconst initialSearchState = {\r\n  searchfield: \"\"\r\n};\r\nexport const searchRobots = (state = initialSearchState, action = {}) => {\r\n  switch (action.type) {\r\n    case CHANGE_SEARCHFIELD:\r\n      return Object.assign({}, state, { searchfield: action.payload });\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nconst initialRobotsState = {\r\n  robots: [],\r\n  isPending: false,\r\n  error: \"\"\r\n};\r\n\r\nexport const getRobots = (state = initialRobotsState, action = {}) => {\r\n  switch (action.type) {\r\n    case REQUEST_ROBOTS_PENDING:\r\n      return Object.assign({}, state, { isPending: true });\r\n    case REQUEST_ROBOTS_SUCCESS:\r\n      return Object.assign({}, state, {\r\n        isPending: false,\r\n        robots: action.payload\r\n      });\r\n    case REQUEST_ROBOTS_FAILED:\r\n      return Object.assign({}, state, {\r\n        isPending: false,\r\n        error: action.payload\r\n      });\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { createStore, applyMiddleware, combineReducers } from \"redux\";\nimport { Provider } from \"react-redux\";\nimport thunkMiddleware from \"redux-thunk\";\nimport { createLogger } from \"redux-logger\";\nimport \"./index.css\";\nimport \"tachyons\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport App from \"./Containers/App/App\";\nimport { searchRobots, getRobots } from \"./Reducers\";\n\nconst rootReducer = combineReducers({ searchRobots, getRobots });\nconst logger = createLogger();\n\nconst store = createStore(rootReducer, applyMiddleware(thunkMiddleware));\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}